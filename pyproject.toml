[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "tedana"
description = "TE-Dependent Analysis (tedana) of multi-echo functional magnetic resonance imaging (fMRI) data."
readme = "README.md"
authors = [{name = "tedana developers"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
]
license = {file = "LICENSE"}
requires-python = ">=3.9"
dependencies = [
    "bokeh>=3.0.0",
    "mapca>=0.0.4",
    "matplotlib>=3.7",
    "nibabel>=2.5.1",
    "nilearn>=0.10.3,<0.12",
    "numpy>=1.21",
    "pandas>=2.0",
    "pybtex>=0.25",
    "pybtex-apa-style>=1.3",
    "robustica>=0.1.4",
    "scikit-learn>=0.21",
    "scipy>=1.2.0",
    "seaborn>=0.13.2",
    "setuptools>=65",
    "threadpoolctl >=3.2",
    "tqdm>=4.65",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/ME-ICA/tedana"
Documentation = "https://www.tedana.readthedocs.io"
Paper = "https://joss.theoj.org/papers/10.21105/joss.03669"

[project.optional-dependencies]
dev = ["pre-commit"]
doc = [
    "sphinx>=6.2.1",
    "sphinx_copybutton",
    "sphinx_rtd_theme>=1.2.2",
    "sphinx-argparse",
    "sphinxcontrib-bibtex",
]

tests = [
    "coverage[toml]>=5.2.1",
    "flake8>=3.7",
    "flake8-absolute-import>=1.0",
    "flake8-black>=0.3",
    "flake8-docstrings>=1.7",
    "flake8-isort>=6",
    "flake8-pyproject>=1.2",
    "flake8-unused-arguments>=0.0.13",
    "flake8-use-fstring>=1.4",
    "pep8-naming>=0.14",
    "pytest>=8",
    "pytest-cov>=4",
    "requests>=2.31",
]

# Aliases
all = ["tedana[dev,doc,tests]"]

[project.scripts]
ica_reclassify = "tedana.workflows.ica_reclassify:_main"
t2smap = "tedana.workflows.t2smap:_main"
tedana = "tedana.workflows.tedana:_main"

#
# Hatch configurations
#

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
exclude = [".git_archival.txt"]  # No longer needed in sdist

[tool.hatch.build.targets.wheel]
packages = ["tedana"]
exclude = [
    "tedana/tests/data",  # Large test data directory
]

##  The following two sections configure setuptools_scm in the hatch way

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "tedana/_version.py"

#
# Developer tool configurations
#

[tool.black]
line-length = 99
target-version = ['py38']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.github
    | \.hg
    | \.pytest_cache
    | \.testing_data_cache
    | _build
    | build
    | dist
  )/
  | tedana/_version.py
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.flake8]
max-line-length = 99
exclude = [
    "*build/",
    "tedana/_version.py",
]
ignore = ["E203", "E402", "W503"]
per-file-ignores = [
    "*/__init__.py: F401",
    "tedana/tests/*: D",
]
docstring-convention = "numpy"

[tool.pydocstringformatter]
write = true
strip-whitespaces = true
max-summary-lines = 1

[tool.coverage.run]
branch = true
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
    "tedana/_version.py",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    'raise NotImplementedError',
    'warnings\.warn',
]

[tool.pytest]
log_cli = true
