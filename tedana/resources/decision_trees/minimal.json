{
    "tree_id": "minimal_decision_tree_test1",
    "info": "Proposed minimal decision tree",
    "report": "This is based on the minimal criteria of the original MEICA decision tree without the more aggressive noise removal steps",
    "refs": "Kundu 2013; DuPre, Salo, 2021",
    "necessary_metrics": [
        "kappa",
        "rho",
        "countsigFS0",
        "countsigFT2",
        "dice_FS0",
        "dice_FT2",
        "signal-noise_t",
        "variance explained"
    ],
    "intermediate_classifications": [
        "provisionalaccept",
        "provisionalreject"
    ],
    "classification_tags": [
        "Likely BOLD",
        "Unlikely BOLD",
        "Low variance"
    ],
    "nodes": [
        {
            "functionname": "manual_classify",
            "parameters": {
                "new_classification": "unclassified",
                "decide_comps": "all"
            },
            "kwargs": {
                "log_extra_report": "",
                "clear_classification_tags": true,
                "dont_warn_reclassify": true
            }
        },
        {
            "functionname": "dec_left_op_right",
            "parameters": {
                "if_true": "rejected",
                "if_false": "nochange",
                "decide_comps": "all",
                "op": ">",
                "left": "rho",
                "right": "kappa"
            },
            "kwargs": {
                "log_extra_report": "",
                "tag_if_true": "Unlikely BOLD"
            },
            "_comment": "Components with rho > kappa are rejected."
        },
        {
            "functionname": "dec_left_op_right",
            "parameters": {
                "if_true": "rejected",
                "if_false": "nochange",
                "decide_comps": "all",
                "op": ">",
                "left": "countsigFS0",
                "right": "countsigFT2"
            },
            "kwargs": {
                "left2": "countsigFT2",
                "op2": ">",
                "right2": 0,
                "log_extra_report": "",
                "tag_if_true": "Unlikely BOLD"
            },
            "_comment": "Components with more significant TE-independence model F-statistic voxels than TE-dependence model F-stats are rejected."
        },
        {
            "functionname": "calc_median",
            "parameters": {
                "decide_comps": "all",
                "metric_name": "variance explained",
                "median_label": "varex"
            },
            "_comment": "The median variance explained across all components is necessary for other steps."
        },
        {
            "functionname": "dec_left_op_right",
            "parameters": {
                "if_true": "rejected",
                "if_false": "nochange",
                "decide_comps": "all",
                "op": ">",
                "left": "dice_FS0",
                "right": "dice_FT2"
            },
            "kwargs": {
                "left2": "variance explained",
                "op2": ">",
                "right2": "median_varex",
                "log_extra_report": "",
                "tag_if_true": "Unlikely BOLD"
            },
            "_comment": "Any components with greater than median variance explained and higher DSI between the binarized map of significant F-stats and significant S0 voxels than between the F-stats map and significant T2* voxels are rejected."
        },
        {
            "functionname": "dec_left_op_right",
            "parameters": {
                "if_true": "rejected",
                "if_false": "nochange",
                "decide_comps": "all",
                "op": ">",
                "left": 0,
                "right": "signal-noise_t"
            },
            "kwargs": {
                "left2": "variance explained",
                "op2": ">",
                "right2": "median_varex",
                "log_extra_report": "",
                "tag_if_true": "Unlikely BOLD"
            },
            "_comment": "Any components with noise > signal t-statistic and vairnace explained > median are rejected."
        },
        {
            "functionname": "calc_kappa_elbow",
            "parameters": {
                "decide_comps": "all"
            },
            "kwargs": {
                "log_extra_info": "",
                "log_extra_report": ""
            },
            "_comment": "The kappa elbow is calculated for later steps."
        },
        {
            "functionname": "calc_rho_elbow",
            "parameters": {
                "decide_comps": "all"
            },
            "kwargs": {
                "subset_decide_comps": "unclassified",
                "rho_elbow_type": "liberal",
                "log_extra_info": "",
                "log_extra_report": ""
            },
            "_comment": "The liberal rho elbow is calculated for later steps."
        },
        {
            "functionname": "dec_left_op_right",
            "parameters": {
                "if_true": "provisionalaccept",
                "if_false": "provisionalreject",
                "decide_comps": "unclassified",
                "op": ">=",
                "left": "kappa",
                "right": "kappa_elbow_kundu"
            },
            "kwargs": {
                "log_extra_report": ""
            },
            "_comment": "Unclassified components with kappa greater than or equal to the kappa elbow are provisionally accepted, with all other unclassified components being provisionally rejected."
        },
        {
            "functionname": "dec_left_op_right",
            "parameters": {
                "if_true": "accepted",
                "if_false": "nochange",
                "decide_comps": "provisionalaccept",
                "op": ">",
                "left": "kappa",
                "right": "rho"
            },
            "kwargs": {
                "log_extra_info": "If kappa>elbow and kappa>2*rho accept even if rho>elbow",
                "log_extra_report": "",
                "right_scale": 2,
                "tag_if_true": "Likely BOLD"
            },
            "_comment": "Provisionally accepted components with kappa greater than rho are accepted."
        },
        {
            "functionname": "dec_left_op_right",
            "parameters": {
                "if_true": "provisionalreject",
                "if_false": "nochange",
                "decide_comps": [
                    "provisionalreject",
                    "provisionalaccept"
                ],
                "op": ">",
                "left": "rho",
                "right": "rho_elbow_liberal"
            },
            "kwargs": {
                "log_extra_report": ""
            },
            "_comment": "Provisionally accepted and provisionally rejected components with rho values greater than the liberal rho elbow are provisionally rejected."
        },
        {
            "functionname": "dec_variance_lessthan_thresholds",
            "parameters": {
                "if_true": "accepted",
                "if_false": "nochange",
                "decide_comps": "provisionalreject"
            },
            "kwargs": {
                "var_metric": "variance explained",
                "log_extra_info": "",
                "log_extra_report": "",
                "single_comp_threshold": 0.1,
                "all_comp_threshold": 1.0,
                "tag_if_true": "Low variance"
            },
            "_comment": "Provisionally rejected components with variance explained less than X are flagged as 'low variance' and are accepted."
        },
        {
            "functionname": "manual_classify",
            "parameters": {
                "new_classification": "accepted",
                "decide_comps": "provisionalaccept"
            },
            "kwargs": {
                "log_extra_info": "",
                "log_extra_report": "",
                "tag": "Likely BOLD"
            },
            "_comment": "All remaining provisionally accepted components are rejected."
        },
        {
            "functionname": "manual_classify",
            "parameters": {
                "new_classification": "rejected",
                "decide_comps": [
                    "provisionalreject",
                    "unclassified"
                ]
            },
            "kwargs": {
                "log_extra_info": "",
                "log_extra_report": "",
                "tag": "Unlikely BOLD"
            },
            "_comment": "All remaining unclassified or provisionally rejected components are rejected."
        }
    ]
}