# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
jobs:

  build:
    docker:
      - image: docker:18.01.0-ce-git
    working_directory: /tedana
    steps:
      - run:
          name: Install parallel gzip and Python 3
          command: |
            apk add --no-cache pigz python3
      - checkout
      - setup_remote_docker
      - run:
          name: Build image
          no_output_timeout: 30m
          command: |
            THISVERSION=$( python3 -c 'import tedana; print(tedana.__version__)' )
            echo "Building version ${CIRCLE_TAG:-$THISVERSION}"
            docker build \
              --cache-from=tedana/tedana-dev \
              --rm=false \
              --tag tedana/tedana-dev:latest \
              --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
              --build-arg VCS_REF="$(git rev-parse --short HEAD)" \
              --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" \
              --file Dockerfile_dev .
      - run:
          name: Docker save
          no_output_timeout: 40m
          command: |
            mkdir -p /tmp/cache
            docker save tedana/tedana-dev:latest \
            | pigz -2 -p 3 > /tmp/cache/docker.tar.gz
      - persist_to_workspace:
          root: /tmp
          paths:
            - cache/docker.tar.gz

  get_test_data:
    docker:
      - image: docker:18.01.0-ce-git
    working_directory: /tedana
    steps:
      - checkout
      - run:
          name: Install curl and tar
          command: |
            apk add --no-cache bash curl curl-dev tar bzip2 xz
      - run:
          name: Get data
          command: |
            bash -c "source ./dev_tools/get_data.sh && download_data"
      - persist_to_workspace:
          root: /tmp
          paths:
            - data/

  style_check:
    docker:
      - image: docker:18.01.0-ce-git
    working_directory: /tedana
    steps:
      - checkout
      - run:
          name: Install python3
          command: |
            apk add --no-cache python3
      - run:
          name: Run style check
          command: |
            python3 --version
            python3 -m pip install "flake8<3.0" flake8-putty
            flake8 tedana

  unit_tests:
    machine:
      image: circleci/classic:201711-01
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              sudo apt update && sudo apt -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Run unit tests
          no_output_timeout: 2h
          command: |
            docker run --rm -v ${PWD}:/tedana -v /tmp/data:/tmp/data \
                tedana/tedana-dev:latest bash -c \
                'source ./dev_tools/run_tests.sh && \
                 for pyenv in tedana_py3{5,6,7}; do run_unit_test ${pyenv}; done'
            mkdir ~/coverage
            mv ./.coverage ~/coverage/.coverage.units
      - store_artifacts:
          path: ~/coverage
      - persist_to_workspace:
          root: ~/coverage
          paths:
              - .coverage.units

  integration_tests:
    machine:
      image: circleci/classic:201711-01
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              sudo apt update && sudo apt -y install pigz
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
              docker images
            fi
      - run:
          name: Run three-echo dataset
          no_output_timeout: 40m
          command: |
            docker run --rm -v ${PWD}:/tedana -v /tmp/data:/tmp/data \
                tedana/tedana-dev:latest bash -c \
                'source ./dev_tools/run_tests.sh && run_integration_tests'
            mkdir ~/coverage
            mv ./.coverage ~/coverage/.coverage.integration
      - store_artifacts:
          path: /tmp/data
      - store_artifacts:
          path: ~/coverage
      - persist_to_workspace:
          root: ~/coverage
          paths:
              - .coverage.integration

  merge_coverage:
    docker:
      - image: docker:18.01.0-ce-git
    working_directory: /tedana
    steps:
      - attach_workspace:
          at: ~/coverage
      - run:
          name: Install python3
          command: |
            apk add --no-cache python3
      - run:
          name: Merge coverage files
          command: |
            python3 --version
            python3 -m pip install coverage
            cd ~/coverage
            coverage combine
            coverage xml
      - store_artifacts:
          path: ~/coverage
      - codecov/upload:
          file: ~/coverage/coverage.xml

workflows:
  version: 2.1
  build_test:
    jobs:
      - style_check
      - build
          requires:
            - style_check
      - get_test_data
          requires:
            - style_check
      - integration_tests:
          requires:
            - build
            - get_test_data
      - unit_tests:
          requires:
            - build
            - get_test_data
      - merge_coverage:
          requires:
            - unit_tests
            - integration_tests
