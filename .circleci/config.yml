# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
jobs:
  py_env:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/tedana
      - restore_cache: # ensure this step occurs *before* installing dependencies
          key: v1-{{ checksum "pyproject.toml" }}-{{ "<< parameters.PYTHON >>" }}
      - run: # will overwrite pySPFM installation each time
          name: Generate environment
          command: |
            if [[ -e /opt/conda/envs/py<< parameters.PYTHON >>_env ]]; then
                echo "Restoring environment from cache"
                source activate py<< parameters.PYTHON >>_env
            else
                conda create -n py<< parameters.PYTHON >>_env python=<< parameters.PYTHON >> -yq
                source activate py<< parameters.PYTHON >>_env
                pip install -e .[tests,doc]
            fi
      - save_cache: # environment cache tied to requirements
          key: v1-{{ checksum "pyproject.toml" }}-{{ "<< parameters.PYTHON >>" }}
          paths:
            - "/opt/conda/envs/py<< parameters.PYTHON >>_env"

  unittest:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "<< parameters.PYTHON >>" }}
      - run:
          name: Generate environment
          command: |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl
            cp -r /opt/conda/envs/py<< parameters.PYTHON >>_env /opt/miniconda-latest/envs/py<< parameters.PYTHON >>_env
            source activate py<< parameters.PYTHON >>_env
            pip install -e .[all]
      - run:
          name: Running unit tests
          command: |
            source activate py<< parameters.PYTHON >>_env
            make unittest
            mkdir /tmp/src/coverage
            mv /tmp/src/tedana/.coverage /tmp/src/coverage/.coverage.py<< parameters.PYTHON >>
      - save_cache:
          key: conda-py<< parameters.PYTHON >>-v3-{{ checksum "pyproject.toml" }}
          paths:
            - /opt/conda/envs/py<< parameters.PYTHON >>_env
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/coverage/.coverage.unittest

  style_check:
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "3.9" }}
      - run:
          name: Linting
          command: |
            apt-get update
            apt-get install -yqq make
            source activate py3.9_env
            make lint

  three-echo:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "<< parameters.PYTHON >>" }}
      - run:
          name: Run integration tests
          no_output_timeout: 40m
          command: |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl
            cp -r /opt/conda/envs/py<< parameters.PYTHON >>_env /opt/miniconda-latest/envs/py<< parameters.PYTHON >>_env
            source activate py<< parameters.PYTHON >>_env
            make three-echo
            mkdir /tmp/src/coverage
            mv /tmp/src/tedana/.coverage /tmp/src/coverage/.coverage.three-echo
      - store_artifacts:
          path: /tmp/src/tedana/.testing_data_cache/outputs
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/coverage/.coverage.three-echo

  four-echo:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "<< parameters.PYTHON >>" }}
      - run:
          name: Run integration tests
          no_output_timeout: 40m
          command: |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl
            cp -r /opt/conda/envs/py<< parameters.PYTHON >>_env /opt/miniconda-latest/envs/py<< parameters.PYTHON >>_env
            source activate py<< parameters.PYTHON >>_env
            make four-echo
            mkdir /tmp/src/coverage
            mv /tmp/src/tedana/.coverage /tmp/src/coverage/.coverage.four-echo
      - store_artifacts:
          path: /tmp/src/tedana/.testing_data_cache/outputs
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/coverage/.coverage.four-echo

  five-echo:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "<< parameters.PYTHON >>" }}
      - run:
          name: Run integration tests
          no_output_timeout: 40m
          command: |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl
            cp -r /opt/conda/envs/py<< parameters.PYTHON >>_env /opt/miniconda-latest/envs/py<< parameters.PYTHON >>_env
            source activate py<< parameters.PYTHON >>_env
            make five-echo
            mkdir /tmp/src/coverage
            mv /tmp/src/tedana/.coverage /tmp/src/coverage/.coverage.five-echo
      - store_artifacts:
          path: /tmp/src/tedana/.testing_data_cache/outputs
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/coverage/.coverage.five-echo

  reclassify:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "<< parameters.PYTHON >>" }}
      - run:
          name: Run integration tests
          no_output_timeout: 40m
          command: |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl
            cp -r /opt/conda/envs/py<< parameters.PYTHON >>_env /opt/miniconda-latest/envs/py<< parameters.PYTHON >>_env
            source activate py<< parameters.PYTHON >>_env
            make reclassify
            mkdir /tmp/src/coverage
            mv /tmp/src/tedana/.coverage /tmp/src/coverage/.coverage.reclassify
      - store_artifacts:
          path: /tmp/src/tedana/.testing_data_cache/outputs
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/coverage/.coverage.reclassify

  t2smap:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "<< parameters.PYTHON >>" }}
      - run:
          name: Run integration tests
          no_output_timeout: 40m
          command: |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl
            cp -r /opt/conda/envs/py<< parameters.PYTHON >>_env /opt/miniconda-latest/envs/py<< parameters.PYTHON >>_env
            source activate py<< parameters.PYTHON >>_env
            make t2smap
            mkdir /tmp/src/coverage
            mv /tmp/src/tedana/.coverage /tmp/src/coverage/.coverage.t2smap
      - store_artifacts:
          path: /tmp/src/tedana/.testing_data_cache/outputs
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/coverage/.coverage.t2smap

  merge_coverage:
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "3.9" }}
      - run:
          name: Merge coverage files
          command: |
            apt-get update
            apt-get install -yqq curl
            source activate tedana_py38  # depends on makeenv38
            cd /tmp/src/coverage/
            coverage combine
            coverage xml
      - store_artifacts:
          path: /tmp/src/coverage
      - codecov/upload:
          file: /tmp/src/coverage/coverage.xml

workflows:
  version: 2.1
  run_tests:
    jobs:
      - py_env:
          name: py_env-<< matrix.PYTHON >>
          matrix:
            parameters:
              PYTHON: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
      - style_check:
          requires:
            - py_env-3.9
      - py_unittest:
          name: py_unittest-<< matrix.PYTHON >>
          matrix:
            parameters:
              PYTHON: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
          requires:
            - py_env-<< matrix.PYTHON >>
      - py_integration:
          name: py_integration-<< matrix.PYTHON >>
          matrix:
            parameters:
              PYTHON: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
          requires:
            - py_env-<< matrix.PYTHON >>
