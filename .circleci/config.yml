# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
jobs:

  build:
    working_directory: /tmp/src/tedana
    docker:
      # Ubuntu 14.04 with Docker 17.10.0-ce
      - image: continuumio/miniconda3
    steps:
      - checkout
      - persist_to_workspace:
          root: /tmp
          paths:
              - src/tedana/
      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: test-v1-{{ checksum "requirements.txt" }}
      - run:
          name: Generate environment
          command: |
            if [[ -e /opt/conda/envs/venv ]]; then
                echo "Restoring environment from cache"
                source activate venv
            else
                conda create -n venv python=3.6 lxml nose cython mkl sphinx patsy boto3 pillow -yq
                conda install -n venv nose-timer -c conda-forge -yq
                source activate venv
                pip install pytest pytest-cov codecov coverage coveralls 'flake8<3.0' flake8-putty
                pip install -r requirements.txt
            fi
      - save_cache:
          key: test-v1-{{ checksum "requirements.txt" }}
          paths:
            - "/opt/conda/envs/venv"

  get_data:
    working_directory: /tmp/src/tedana
    docker:
      # Ubuntu 14.04 with Docker 17.10.0-ce
      - image: continuumio/miniconda3
    steps:
      - restore_cache:
          keys:
              - data-v1-{{ .Branch }}
              - data-v1-
      - run:
          name: Download test three-echo data
          command: |
            if [[ -e /tmp/data/three-echo ]]; then
              echo "Restoring three-echo data from cache"
            else
                mkdir -p /tmp/data
                curl -L --create-dirs -o \
                  /tmp/data/three-echo/three_echo_Cornell_zcat.nii.gz https://osf.io/8fzse/download
            fi
      - run:
          name: Download test five-echo data
          command: |
            if [[ -e /tmp/data/five-echo ]]; then
              echo "Restoring five-echo data from cache"
            else
                mkdir /tmp/data/five-echo
                curl -L -o five_echo_NIH.tar.xz https://osf.io/ea5v3/download
                tar xf five_echo_NIH.tar.xz -C /tmp/data/five-echo
            fi
      - persist_to_workspace:
          root: /tmp
          paths:
              - data/three-echo/
              - data/five-echo/
      - save_cache:
          key: data-v1-{{ .Branch }}
          paths:
              - /tmp/data

  get_regression_data:
    working_directory: /tmp/src/tedana
    docker:
      # Ubuntu 14.04 with Docker 17.10.0-ce
      - image: continuumio/miniconda3
    steps:
      - restore_cache:
          keys:
              - test-v1-{{ .Branch }}
              - test-v1-
      - run:
          name: Download expected output for three-echo data
          command: |
            if [[ -e /tmp/test/three-echo ]]; then
              echo "Restoring three-echo regression data from cache"
            else
                mkdir -p /tmp/test/three-echo/
                curl -L -o TED.Cornell_processed_three_echo_dataset.tar.xz https://osf.io/u65sq/download
                tar xf TED.Cornell_processed_three_echo_dataset.tar.xz --no-same-owner -C /tmp/test/three-echo/
            fi
      - run:
          name: Download expected output for five-echo data
          command: |
            if [[ -e /tmp/test/five-echo ]]; then
              echo "Restoring five-echo regression data from cache"
            else
                mkdir -p /tmp/test/five-echo/
                curl -L -o TED.p06.tar.xz https://osf.io/fr6mx/download
                tar xf TED.p06.tar.xz --no-same-owner -C /tmp/test/five-echo/
            fi
      - persist_to_workspace:
          root: /tmp
          paths:
              - test/three-echo/
              - test/five-echo/
      - save_cache:
          key: test-v1-{{ .Branch }}
          paths:
              - /tmp/test

  three_echo_rest:
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - attach_workspace:
          at: /tmp
      - restore_cache:  # load environment
          key: test-v1-{{ checksum "requirements.txt" }}
      - run:
          name: Run three-echo dataset
          no_output_timeout: 40m
          command: |
            source activate venv
            python setup.py install
            py.test tedana/tests/test_integration_three_echo.py \
              --cov-append --cov-report term-missing --cov=tedana
            mkdir /tmp/src/coverage/
            mv /tmp/src/tedana/.coverage /tmp/src/coverage/.coverage.1
      - run:
          name: Checking outputs
          command: |
            find /tmp/data/three-echo/TED.three-echo/* \
                -exec basename {} \; | sort > /tmp/data/three-echo/TED.three-echo/outputs.out
            diff /tmp/src/tedana/.circleci/tedana_outputs.txt /tmp/data/three-echo/TED.three-echo/outputs.out
      - store_artifacts:
          path: /tmp/data/three-echo
      - store_artifacts:
          path: /tmp/src/coverage
      - persist_to_workspace:
          root: /tmp
          paths:
              - src/coverage/.coverage.1

  five_echo_task:
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - attach_workspace:
          at: /tmp
      - restore_cache:  # load environment
          key: test-v1-{{ checksum "requirements.txt" }}
      - run:
          name: Run five-echo dataset
          no_output_timeout: 40m
          command: |
            source activate venv
            python setup.py install
            py.test tedana/tests/test_integration_five_echo.py \
              --cov-append --cov-report term-missing --cov=tedana
            mkdir /tmp/src/coverage/
            mv /tmp/src/tedana/.coverage /tmp/src/coverage/.coverage.2
      - run:
          name: Checking outputs
          command: |
            find /tmp/data/five-echo/TED.five-echo/* \
                -exec basename {} \; | sort > /tmp/data/five-echo/TED.five-echo/outputs.out
            diff /tmp/src/tedana/.circleci/tedana_outputs_verbose.txt /tmp/data/five-echo/TED.five-echo/outputs.out
      - store_artifacts:
          path: /tmp/data/five-echo
      - store_artifacts:
          path: /tmp/src/coverage
      - persist_to_workspace:
          root: /tmp
          paths:
              - src/coverage/.coverage.2

  py36_unit_tests_and_coverage:
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - attach_workspace:
          at: /tmp
      - restore_cache:  # load environment
          key: test-v1-{{ checksum "requirements.txt" }}
      - run:
          name: Run unit tests
          command: |
            source activate venv
            python setup.py install
            py.test --ignore-glob=tedana/tests/test_integration*.py \
              --cov-append --cov-report term-missing --cov=tedana tedana
            mkdir /tmp/src/coverage/
            mv /tmp/src/tedana/.coverage /tmp/src/coverage/.coverage.3
      - store_artifacts:
          path: /tmp/src/coverage
      - persist_to_workspace:
          root: /tmp
          paths:
              - src/coverage/.coverage.3

  py35_unit_tests:
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - run:
          name: Generate environment
          command: |
            conda create -n py35_env python=3.5 pytest -yq
            source activate py35_env
            pip install -r requirements.txt
      - run:
          name: Run unit tests
          command: |
            source activate py35_env
            python setup.py install
            py.test --ignore=tedana/tests/test_integration_five_echo.py \
              --ignore=tedana/tests/test_integration_three_echo.py tedana

  py37_unit_tests:
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - run:
          name: Generate environment
          command: |
            conda create -n py37_env python=3.7 pytest -yq
            source activate py37_env
            pip install -r requirements.txt
      - run:
          name: Run unit tests
          command: |
            source activate py37_env
            python setup.py install
            py.test --ignore-glob=tedana/tests/test_integration*.py tedana

  style_check:
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - attach_workspace:
          at: /tmp
      - restore_cache:  # load environment
          key: test-v1-{{ checksum "requirements.txt" }}
      - run:
          name: Run style check
          command: |
            source activate venv
            flake8 tedana

  merge_coverage:
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - attach_workspace:
          at: /tmp
      - restore_cache:  # load environment
          key: test-v1-{{ checksum "requirements.txt" }}
      - run:
          name: Merge coverage files
          command: |
            source activate venv
            cd /tmp/src/coverage/
            coverage combine
            coverage xml
      - store_artifacts:
          path: /tmp/src/coverage
      - codecov/upload:
          file: /tmp/src/coverage/coverage.xml

workflows:
  version: 2.1
  build_test:
    jobs:
      - build
      - get_data
      - get_regression_data
      - py35_unit_tests
      - py36_unit_tests_and_coverage:
          requires:
            - build
      - py37_unit_tests
      - style_check:
          requires:
            - build
      - three_echo_rest:
          requires:
            - build
            - get_data
            - get_regression_data
      - five_echo_task:
          requires:
            - build
            - get_data
            - get_regression_data
      - merge_coverage:
          requires:
            - py36_unit_tests_and_coverage
            - three_echo_rest
            - five_echo_task
