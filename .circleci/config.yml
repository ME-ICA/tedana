# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@5.3.0
jobs:
  py_env:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/tedana
      - restore_cache: # ensure this step occurs *before* installing dependencies
          key: v1-{{ checksum "pyproject.toml" }}-{{ "3.<< parameters.PYTHON >>" }}
      - run: # will overwrite pySPFM installation each time
          name: Generate environment
          command: |
            if [[ -e /opt/conda/envs/py3.<< parameters.PYTHON >>_env ]]; then
                echo "Restoring environment from cache"
                source activate py3.<< parameters.PYTHON >>_env
            else
                conda create -n py3.<< parameters.PYTHON >>_env python=3.<< parameters.PYTHON >> -yq
                source activate py3.<< parameters.PYTHON >>_env
                pip install -e .[tests,doc]
            fi
      - save_cache: # environment cache tied to requirements
          key: v1-{{ checksum "pyproject.toml" }}-{{ "3.<< parameters.PYTHON >>" }}
          paths:
            - "/opt/conda/envs/py3.<< parameters.PYTHON >>_env"

  unittest:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "3.<< parameters.PYTHON >>" }}
      - run:
          name: Generate environment
          command: |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl gnupg
            source activate py3.<< parameters.PYTHON >>_env
            pip install -e .[all]
      - run:
          name: Running unit tests
          command: |
            source activate py3.<< parameters.PYTHON >>_env
            make unittest
            mkdir -p /tmp/src/coverage/unittest_3<< parameters.PYTHON >>
            if [ -f /tmp/src/tedana/.coverage ]; then
              cp /tmp/src/tedana/.coverage /tmp/src/coverage/unittest_3<< parameters.PYTHON >>/.coverage
            fi
      - save_cache:
          key: conda-py3.<< parameters.PYTHON >>-v3-{{ checksum "pyproject.toml" }}
          paths:
            - /opt/conda/envs/py3.<< parameters.PYTHON >>_env
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/coverage

  style_check:
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "3.9" }}
      - run:
          name: Linting
          command: |
            apt-get update
            apt-get install -yqq make
            source activate py3.9_env
            make lint

  three_echo:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "3.<< parameters.PYTHON >>" }}
      - run:
          name: Run integration tests
          no_output_timeout: 40m
          command: |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl gnupg
            source activate py3.<< parameters.PYTHON >>_env
            make three_echo
            mkdir -p /tmp/src/coverage/three_echo
            if [ -f /tmp/src/tedana/.coverage ]; then
              cp /tmp/src/tedana/.coverage /tmp/src/coverage/three_echo/.coverage
            fi
      - store_artifacts:
          path: /tmp/src/tedana/.testing_data_cache/outputs
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/coverage

  four_echo:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "3.<< parameters.PYTHON >>" }}
      - run:
          name: Run integration tests
          no_output_timeout: 40m
          command: |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl gnupg
            source activate py3.<< parameters.PYTHON >>_env
            make four_echo
            mkdir -p /tmp/src/coverage/four_echo
            if [ -f /tmp/src/tedana/.coverage ]; then
              cp /tmp/src/tedana/.coverage /tmp/src/coverage/four_echo/.coverage
            fi
      - store_artifacts:
          path: /tmp/src/tedana/.testing_data_cache/outputs
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/coverage

  five_echo:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "3.<< parameters.PYTHON >>" }}
      - run:
          name: Run integration tests
          no_output_timeout: 40m
          command: |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl gnupg
            source activate py3.<< parameters.PYTHON >>_env
            make five_echo
            mkdir -p /tmp/src/coverage/five_echo
            if [ -f /tmp/src/tedana/.coverage ]; then
              cp /tmp/src/tedana/.coverage /tmp/src/coverage/five_echo/.coverage
            fi
      - store_artifacts:
          path: /tmp/src/tedana/.testing_data_cache/outputs
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/coverage

  reclassify:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "3.<< parameters.PYTHON >>" }}
      - run:
          name: Run integration tests
          no_output_timeout: 40m
          command: |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl gnupg
            source activate py3.<< parameters.PYTHON >>_env
            make reclassify
            mkdir -p /tmp/src/coverage/reclassify
            if [ -f /tmp/src/tedana/.coverage ]; then
              cp /tmp/src/tedana/.coverage /tmp/src/coverage/reclassify/.coverage
            fi
      - store_artifacts:
          path: /tmp/src/tedana/.testing_data_cache/outputs
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/coverage

  t2smap:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "3.<< parameters.PYTHON >>" }}
      - run:
          name: Run integration tests
          no_output_timeout: 40m
          command: |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl gnupg
            source activate py3.<< parameters.PYTHON >>_env
            make t2smap
            mkdir -p /tmp/src/coverage/t2smap
            if [ -f /tmp/src/tedana/.coverage ]; then
              cp /tmp/src/tedana/.coverage /tmp/src/coverage/t2smap/.coverage
            fi
      - store_artifacts:
          path: /tmp/src/tedana/.testing_data_cache/outputs
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/coverage

  merge_coverage:
    working_directory: /tmp/src/tedana
    docker:
      - image: continuumio/miniconda3
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ "3.9" }}
      - run:
          name: Merge coverage files
          command: |
            source activate py3.9_env
            apt-get update
            apt-get install -yqq curl gnupg

            # List all coverage directories
            ls -la /tmp/src/coverage/

            # Create a combined coverage file
            cd /tmp/src/coverage/

            # Create a combined .coveragerc file to handle paths
            echo "[paths]" > .coveragerc
            echo "source =" >> .coveragerc
            echo "    /tmp/src/tedana" >> .coveragerc

            # Combine all coverage files from subdirectories
            echo "Finding coverage files in subdirectories..."
            find . -name ".coverage" -type f | xargs ls -la

            # Combine using absolute paths to avoid issues
            find . -name ".coverage" -type f -print0 | xargs -0 -I{} coverage combine --append "{}"

            # Generate the XML report
            coverage xml
            mv coverage.xml /tmp/src/tedana/
      - store_artifacts:
          path: /tmp/src/coverage
      - codecov/upload

workflows:
  coverage:
    jobs:
      - py_env:
          name: py_env-3.<< matrix.PYTHON >>
          matrix:
            parameters:
              PYTHON: ["8", "9", "10", "11", "12", "13"]
      - style_check:
          requires:
            - py_env-3.9
      - unittest:
          name: unittest_3<< matrix.PYTHON >>
          matrix:
            parameters:
              PYTHON: ["8", "9", "10", "11", "12", "13"]
          requires:
            - py_env-3.<< matrix.PYTHON >>
          post-steps:
            - codecov/upload
      - t2smap:
          name: t2smap
          matrix:
            parameters:
              PYTHON: ["9"]
          requires:
            - py_env-3.<< matrix.PYTHON >>
          post-steps:
            - codecov/upload
      - reclassify:
          name: reclassify
          matrix:
            parameters:
              PYTHON: ["9"]
          requires:
            - py_env-3.<< matrix.PYTHON >>
          post-steps:
            - codecov/upload
      - three_echo:
          name: three_echo
          matrix:
            parameters:
              PYTHON: ["9"]
          requires:
            - py_env-3.<< matrix.PYTHON >>
          post-steps:
            - codecov/upload
      - four_echo:
          name: four_echo
          matrix:
            parameters:
              PYTHON: ["9"]
          requires:
            - py_env-3.<< matrix.PYTHON >>
          post-steps:
            - codecov/upload
      - five_echo:
          name: five_echo
          matrix:
            parameters:
              PYTHON: ["9"]
          requires:
            - py_env-3.<< matrix.PYTHON >>
          post-steps:
            - codecov/upload
      - merge_coverage:
          requires:
            - unittest_38
            - unittest_39
            - unittest_310
            - unittest_311
            - unittest_312
            - unittest_313
            - t2smap
            - reclassify
            - three_echo
            - four_echo
            - five_echo
