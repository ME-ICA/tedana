##################################
Using tedana from the command line
##################################

``tedana`` minimally requires:

  #. Acquired echo times (in milliseconds)
  #. Functional datasets equal to the number of acquired echoes

But you can supply many other options, viewable with ``tedana -h``,
``ica_reclassify -h``, or ``t2smap -h``.

For most use cases, we recommend that users call tedana from within existing
fMRI preprocessing pipelines such as `fMRIPrep`_ or `afni_proc.py`_.
fMRIPrep currently supports :ref:`optimal combination` through ``tedana``, but
not the full multi-echo denoising pipeline, although there are plans underway
to integrate it.
In the meantime, if you plan to use fMRIPrep and tedana together, please see
:ref:`collecting fMRIPrepped data`.

Users can also construct their own preprocessing pipelines from which to call
``tedana``; for recommendations on doing so, see our general guidelines for
:ref:`constructing ME-EPI pipelines`.

.. _fMRIPrep: https://fmriprep.readthedocs.io
.. _afni_proc.py: https://afni.nimh.nih.gov/pub/dist/doc/program_help/afni_proc.py.html


.. _tedana cli:

***************************
Running the tedana workflow
***************************

This is the full tedana workflow, which runs multi-echo ICA and outputs
multi-echo denoised data along with many other derivatives.
To see which files are generated by this workflow, check out the outputs page:
https://tedana.readthedocs.io/en/latest/outputs.html

.. argparse::
   :ref: tedana.workflows.tedana._get_parser
   :prog: tedana
   :func: _get_parser

.. note::
    The ``--mask`` argument is not intended for use with very conservative region-of-interest
    analyses.
    One of the ways by which components are assessed as BOLD or non-BOLD is their
    spatial pattern, so overly conservative masks will invalidate several steps in the tedana
    workflow.
    To examine regions-of-interest with multi-echo data, apply masks after TE
    Dependent ANAlysis.

.. _ica_reclassify cli:

***********************************
Running the ica_reclassify workflow
***********************************

``ica_reclassify`` takes the output of ``tedana`` and can be used to manually
reclassify components, re-save denoised classifications following the new
classifications, and log the changes in all relevant output files. The
output files are the same as for ``tedana``:
https://tedana.readthedocs.io/en/latest/outputs.html

.. argparse::
   :ref: tedana.workflows.ica_reclassify._get_parser
   :prog: ica_reclassify
   :func: _get_parser

.. _t2smap cli:

***************************
Running the t2smap workflow
***************************

This workflow uses multi-echo data to optimally combine data across echoes and
to estimate T2* and S0 maps or time series.
To see which files are generated by this workflow, check out the workflow
documentation: :py:func:`tedana.workflows.t2smap_workflow`.

.. argparse::
   :ref: tedana.workflows.t2smap._get_parser
   :prog: t2smap
   :func: _get_parser
